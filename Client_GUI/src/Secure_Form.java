import com.bric.colorpicker.ColorPicker;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Arrays;

public class Secure_Form {
	private JPanel leftPanel;
	private JButton join_btn;
	private JTextField userField;
	private JLabel serverLabel;
	private JLabel userLabel;
	private JComboBox serverComboBox;
	private JLabel colorLabel;
	private JButton colorBtn;

	private static JFrame frame;

	static String IP_ADDRESS;
	static final int PORT = 6969;
	static String USERNAME;
	static float[] COLOR = {0f, 0f, 0f};

	public static void main(String[] args) {

		//creating the main frame/window to choose server settings

		frame = new JFrame("Secure Form");
		frame.setContentPane(new Secure_Form().leftPanel);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setBounds(800, 400, 300, 250);
		//frame.pack();
		frame.setVisible(true);
	}

	public Secure_Form() {

		//add server selections
		serverComboBox.addItem("Server 1");
		serverComboBox.addItem("Local Host");

		//event listener for the join button that grabs all filled in fields
		join_btn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println(Arrays.toString(COLOR));

				switch (serverComboBox.getSelectedIndex()) {
					case 0:
						IP_ADDRESS = "13.68.225.53";
					case 1:
						IP_ADDRESS = "127.0.0.1";
				}

				USERNAME = userField.getText();


				// after that we create the new chat window
				// we also use try/catch statement for the Socket declaration in Secure_Chat()'s constructor
				JFrame frame2 = new JFrame("Secure Chat");
				try {
					frame2.setContentPane(new Secure_Chat().getPanel());
				} catch (IOException ioException) {
					ioException.printStackTrace();
				}
				frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame2.setBounds(700, 300, 500, 400);
				//frame2.pack();
				frame2.setVisible(true);

				//and for more style points we close the old window :)
				Secure_Form.frame.setVisible(false);
			}
		});
		colorBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JFrame frame = new JFrame("ColorPicker Example");
				JPanel panel = new JPanel();

				ColorPicker colorPicker = new ColorPicker();
				colorPicker.setColor(Color.blue);
				colorPicker.addColorListener(colorModel -> COLOR = colorModel.getHSB());

				frame.setSize(600, 400);
				frame.setBackground(Color.darkGray);
				frame.setForeground(Color.lightGray);
				panel.setBackground(Color.darkGray);
				panel.setForeground(Color.lightGray);
				colorPicker.setBackground(Color.darkGray);
				colorPicker.setForeground(Color.lightGray);

				panel.add(colorPicker);
				frame.add(panel);
				frame.setVisible(true);

			}
		});
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		leftPanel = new JPanel();
		leftPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
		leftPanel.setBackground(new Color(-11776947));
		panel1.add(leftPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		join_btn = new JButton();
		join_btn.setBackground(new Color(-11382188));
		join_btn.setForeground(new Color(-5066062));
		join_btn.setText("Join Chat");
		leftPanel.add(join_btn, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		userField = new JTextField();
		userField.setBackground(new Color(-11382188));
		userField.setForeground(new Color(-16777216));
		userField.setText("user");
		leftPanel.add(userField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		serverLabel = new JLabel();
		serverLabel.setBackground(new Color(-11776947));
		serverLabel.setText("  Server");
		leftPanel.add(serverLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		userLabel = new JLabel();
		userLabel.setBackground(new Color(-11776947));
		userLabel.setEnabled(true);
		userLabel.setText("Username");
		leftPanel.add(userLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		serverComboBox = new JComboBox();
		serverComboBox.setBackground(new Color(-11776947));
		serverComboBox.setEditable(false);
		Font serverComboBoxFont = this.$$$getFont$$$(null, -1, -1, serverComboBox.getFont());
		if (serverComboBoxFont != null) serverComboBox.setFont(serverComboBoxFont);
		serverComboBox.setForeground(new Color(-5066062));
		leftPanel.add(serverComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		colorLabel = new JLabel();
		colorLabel.setBackground(new Color(-11776947));
		colorLabel.setText("Color");
		leftPanel.add(colorLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		colorBtn = new JButton();
		colorBtn.setText("Choose color");
		leftPanel.add(colorBtn, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

}
